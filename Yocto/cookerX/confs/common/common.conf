#!/bin/bash

set -x

# layers/poky/oe-init-build-env
if [ -f "$PJ_YOCTO_LAYERS_DIR}/poky/oe-init-build-env" ]; then
	. ${PJ_YOCTO_LAYERS_DIR}/poky/oe-init-build-env
else
	PATH=$PJ_ROOT/$PJ_YOCTO_LAYERS_PATH/poky/scripts:$PJ_ROOT/$PJ_YOCTO_LAYERS_PATH/poky/bitbake/bin:$PATH

	export BBPATH="$PJ_YOCTO_BUILD_DIR"
	export BB_ENV_PASSTHROUGH_ADDITIONS="ALL_PROXY BBPATH_EXTRA BB_LOGCONFIG BB_NO_NETWORK BB_NUMBER_THREADS BB_SETSCENE_ENFORCE BB_SRCREV_POLICY DISTRO FTPS_PROXY FTP_PROXY GIT_PROXY_COMMAND HTTPS_PROXY HTTP_PROXY MACHINE NO_PROXY PARALLEL_MAKE SCREENDIR SDKMACHINE SOCKS5_PASSWD SOCKS5_USER SSH_AGENT_PID SSH_AUTH_SOCK STAMPS_DIR TCLIBC TCMODE all_proxy ftp_proxy ftps_proxy http_proxy https_proxy no_proxy "
	#export BB_ENV_EXTRAWHITE="ALL_PROXY BBPATH_EXTRA BB_LOGCONFIG BB_NO_NETWORK BB_NUMBER_THREADS BB_SETSCENE_ENFORCE BB_SRCREV_POLICY DISTRO FTPS_PROXY FTP_PROXY GIT_PROXY_COMMAND HTTPS_PROXY HTTP_PROXY MACHINE NO_PROXY PARALLEL_MAKE SCREENDIR SDKMACHINE SOCKS5_PASSWD SOCKS5_USER SSH_AGENT_PID SSH_AUTH_SOCK STAMPS_DIR TCLIBC TCMODE all_proxy ftp_proxy ftps_proxy http_proxy https_proxy no_proxy "
	export BUILDDIR="$PJ_YOCTO_BUILD_DIR"
	export PYTHONPATH="$PJ_ROOT/$PJ_YOCTO_LAYERS_PATH/poky/bitbake/lib:"
fi

# prompt
PS1="[\[\033[1;32m\]${PJ_YOCTO_BUILD}@${PJ_YOCTO_MACHINE}\[\033[0m\]@\h:\w]\\$ "

set +x
set | grep ^PJ_
set | grep ^CFLAGS_
set | grep ^LDFLAGS_
set | grep ^CONFIG_

set | grep ^BB
set | grep ^PYTH
set | grep ^BUILDDIR

alias cd-root="cd $PJ_ROOT"
alias cd-images-lnk="cd $PJ_ROOT/images-lnk"
alias cd-rootfs="cd $PJ_ROOT/builds-lnk/$PJ_YOCTO_BUILD-rootfs"

alias cooker-menu-cat="(cat $PJ_YOCTO_ROOT/$PJ_COOKER_MENU_PATH/$PJ_COOKER_MENU)"
alias cooker-menu-vi="(vi $PJ_YOCTO_ROOT/$PJ_COOKER_MENU_PATH/$PJ_COOKER_MENU)"

alias local-conf-cat="(cat $PJ_YOCTO_BUILD_DIR/conf/local.conf)"

alias ll-images-dir="(ll $PJ_YOCTO_BUILD_DIR/tmp/deploy/images/$PJ_YOCTO_MACHINE)"
alias ll-rootfs="(ll $PJ_YOCTO_BUILD_DIR/tmp/work/$PJ_YOCTO_LINUX/$PJ_YOCTO_IMAGE/*/rootfs/)"
alias ll-builds-lnk="(cd builds-lnk; ll)"
alias ll-images-lnk="(cd images-lnk; ll)"
alias ll-bb-lnk="(cd bb-lnk; ll)"

alias bb-target-build="(cd $PJ_YOCTO_ROOT; bitbake -c clean $PJ_YOCTO_TARGET; bitbake -f $PJ_YOCTO_TARGET)"
alias bb-target-info="(bb-info $PJ_YOCTO_TARGET)"
alias bb-s="bitbake -s"
alias bb-find="bitbake -s | grep"
alias bb-build="bitbake -c build"
alias bb-cleanall="bitbake -c cleanall"
alias bb-install="bitbake -c install"
alias bb-listtasks="bitbake -c listtasks"
alias bb-package_qa="bitbake -c package_qa"

function bb-srcrev()
{
	echo "(BB_EXTRA_SRCREV=${BB_EXTRA_SRCREV})"
}

function bb-autorev()
{
	export BB_EXTRA_SRCREV="AUTOINC"
	bbake-srcrev
}

function bb-no_network()
{
	unset BB_EXTRA_SRCREV
	bbake-srcrev
}

function bb-info()
{
	HINT="Usage: ${FUNCNAME[0]} <bb>"
	BB1="$1"

	if [ ! -z "${BB1}" ]; then
		echo
		bitbake -s | grep ${BB1}
		echo
		find -name ${BB1}*.bb
		echo
		bitbake -e ${BB1} | grep ^SRC_URI=
		echo
		bitbake -e ${BB1} | grep ^S=
		echo
		bitbake -e ${BB1} | grep ^WORKDIR=
		echo
		bitbake -e ${BB1} | grep ^DEPENDS
		echo
		bitbake -e ${BB1} | grep ^RDEPENDS
		echo
	else 
		echo $HINT
	fi
}

echo

if [ -d ${PJ_YOCTO_DOWNLOADS_DIR} ]; then
	echo "(PJ_YOCTO_DOWNLOADS_DIR=${PJ_YOCTO_DOWNLOADS_DIR})"
else
echo "Please check dl-dir (PJ_YOCTO_DOWNLOADS_DIR=${PJ_YOCTO_DOWNLOADS_DIR}) !!!"
fi

if [ -d "${PJ_YOCTO_SSTATE_DIR}" ]; then
	echo "(PJ_YOCTO_SSTATE_DIR=${PJ_YOCTO_SSTATE_DIR})"
else
echo "Please check sstate-dir (PJ_YOCTO_SSTATE_DIR=${PJ_YOCTO_SSTATE_DIR}) !!!"
fi

echo